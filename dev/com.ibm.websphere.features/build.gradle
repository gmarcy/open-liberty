/*******************************************************************************
 * Copyright (c) 2018 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

  // Start building feature resources after all other assemble artifacts are done being published
  //dependsOn {
  //  bndWorkspace.getProject(project.name)?.getDependson()*.getName().collect {
  //    rootProject.project(it).tasks.getByName 'prereqFeatureResources'
  //  }
  //}

task publishFeatureResources {
  dependsOn parent.subprojects.assemble

  def featureFiles = fileTree(dir: project.projectDir, include: '**/*.feature')
  inputs.files(featureFiles).skipWhenEmpty()
  outputs.dir buildImage.file('wlp/lib/features')
  outputs.dir new File(project.buildDir, 'repo')
  doFirst {
    buildImage.mkdir('wlp/lib/features')
    project.mkdir(new File(project.buildDir, 'repo'))
  }
  doLast {
    ant.taskdef(resource: 'com/ibm/ws/wlp/feature/tasks/default.properties') {
      classpath {
        fileset(dir: cnf.file('lib')) {
          include(name: "wlp-*.jar")
        }
        fileset(dir: cnf.file('mavenlibs')) {
          include(name: "biz.aQute.bnd-*.jar")
          include(name: "infra.buildtasks*.jar")
          include(name: "asm-all-5.2.jar")
          include(name: "org.apache.aries.util-*.jar")
          include(name: "osgi.core*.jar")
          include(name: "jackson*.jar")
          include(name: "jsoup-*.jar")
        }
      }
    }

    ant.taskdef(resource: 'com/ibm/ws/wlp/repository/default.properties') {
      classpath {
        fileset(dir: cnf.file('lib')) {
          include(name: "wlp-generateRepositoryContent.jar")
        }
        fileset(dir: cnf.file('mavenlibs')) {
          include(name: "org.apache.aries.util-*.jar")
          include(name: "jsoup-*.jar")
        }
      }
    }

    featureFiles.each { featureFile ->
      File featureFolder = featureFile.getParentFile()

      Properties props = new Properties()
      props.load(new FileInputStream(featureFile))

      String symbolicName = props['symbolicName']
      String kind = props['kind']
      if (kind == null) {
        throw new GradleException("FeatureÂ " + symbolicName + " does not contain a kind property")
      }
      String version = ("beta".equals(kind) ? bnd.libertyBetaVersion : bnd.libertyServiceVersion)

      // featureBnd task expects files in build/l10n
      String relPath = featureFile.getPath().replace(projectDir.getPath() + '/', '')
      def pathParts = relPath.split('/')
      String visibility = pathParts[0]
      if (pathParts.length == 3) {
        copy {
          from new File(featureFolder, 'resources/l10n')
          into project.file('build/l10n')
        }
        copy {
          from new File(featureFolder, 'resources/l10n')
          into buildImage.file('wlp/lib/features/l10n')
        }
        println visibility + ' feature ' + pathParts[2] + ' (' + pathParts[1] + ')'
      } else {
        println visibility + ' feature ' + pathParts[1]
      }
      println symbolicName
      println kind

      ant.featureBnd(bnd: featureFile.getPath(),
              createESA: "true",
              dir: buildImage.file('wlp'),
              esaDir: new File(project.buildDir, 'repo'),
              createFor: kind,
              buildType: kind,
              junit: new File(project.buildDir, 'report/featureChecks.xml')) {
        defaultEdition(licenseURL: "https://www.eclipse.org/legal/epl-v10.html",
                licensePath: buildImage.file('lafiles/featureTerms'),
                version: version,
                licenseType: "EPL",
                displayVersion: "OpenLiberty")
        edition(baseEdition: "beta")
        edition(baseEdition: "core",
                validEditions: "")
        edition(baseEdition: "base",
                validEditions: "BASE,BASE_ILAN,DEVELOPERS,EXPRESS,ND,zOS")
        edition(baseEdition: "nd",
                validEditions: "BASE_ILAN,DEVELOPERS,ND,zOS")
        edition(baseEdition: "zos",
                validEditions: "zOS")
        edition(baseEdition: "bluemix",
                validEditions: "BLUEMIX")
        edition(baseEdition: "full")
        edition(baseEdition: "unsupported")
      }

      delete "${buildDir}/repo/description.html"
      ant.propertyfile(file: "${buildDir}/repo/assetInfo.properties") {
        entry(key: "licenseType", value: "UNSPECIFIED")
      }
      ant.generateEsaDescriptionHtml(featureManifestFile: ant.properties['feature.manifest.file'],
              descriptionHtmlOutputFile: "${buildDir}/repo/description.html",
              generateKnowledgeCentreLinks: "true",
              licenseType: "EPL")
      ant.zip(destfile: "${buildDir}/repo/${symbolicName}.esa.metadata.zip") {
        fileset(dir: "${buildDir}/repo", includes: "description.html,assetInfo.properties")
        zipfileset(dir: buildImage.file("lafiles/featureTerms_html"), fullpath: "lafiles/en.html", includes: "en.html")
      }

      project.delete('build/l10n')

      throw new GradleException("*** STOP ***")
    }
  }
}
/*
publish.dependsOn publishFeatureResources

def featuresToPublish() {
  def features = []
  fileTree(dir: project.projectDir, include: '*.feature').each {
    Properties props = new Properties()
    props.load(new FileInputStream(it))
    features.add(props['symbolicName'])
  }
  return features
}

publishing {
  publications {
    featuresToPublish().each { feature ->
      maven(MavenPublication) {
        artifactId feature
        version project.version
        artifact source: new File(project.buildDir, 'repo/' + feature + ".esa"), extension: 'esa'
        artifact source: new File(project.buildDir, 'repo/' + feature + ".esa.metadata.zip"), extension: 'esa.metadata.zip'
      }
    }
  }
}
*/