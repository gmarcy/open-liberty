package com.ibm.ws.wlp.docgen.dita;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;

import javax.xml.stream.FactoryConfigurationError;
import javax.xml.stream.XMLStreamException;


public class DITAHelper {
  public static final String IDCONTROLLED_ENTITIES_PREFIX = "../share/wlp_feature_entities_idcontrolled.dita#wlp_feature_entities_idcontrolled/";
  public static final String AUTOGEN_ENTITIES_PREFIX = "../share/wlp_feature_entities_autogenerated.dita#wlp_feature_entities_autogenerated/";
  private final XMLWriter writer;
  private final ResourceBundle types;
  private String featureId;
  private File dir;
  private List<Tagging> editionTagging;
  private Map<String,Tagging> featureTagging = new HashMap<String, Tagging>();
  private String editionName;

  public DITAHelper(File dir, String kind, String name, final File typesFile, Locale l, String lang, String editionName, List<Tagging> tagging, List<Tagging> featureTagging) throws XMLStreamException, FactoryConfigurationError, IOException {
    featureId = name;
    this.editionTagging = tagging;
    
    for (Tagging tag : featureTagging) {
      this.featureTagging.put(tag.getName(), tag);
    }
    
    this.editionName = editionName;

    String resourceBaseName = typesFile.getName();
    int index = resourceBaseName.lastIndexOf('.');
    final String resourceExtensionName = resourceBaseName.substring(index); // includes the '.' character
    types = ResourceBundle.getBundle(resourceBaseName.substring(0, index), l, new ResourceBundle.Control() {

      @Override
      public ResourceBundle newBundle(String baseName, Locale locale,
          String format, ClassLoader loader, boolean reload)
          throws IllegalAccessException, InstantiationException,
          IOException {
        if (FORMAT_PROPERTIES.contains(format)) {
          String bundleName = toBundleName(baseName, locale);
          File candidateBundle = new File(typesFile.getParentFile(), bundleName + resourceExtensionName);
          
          if (candidateBundle.exists()) {
            return new PropertyResourceBundle(new FileReader(candidateBundle));
          }
        }
        
        return null;
      }
      
    });
    
    this.dir = dir;

    File f = new File(dir, "rwlp_" + kind + "_" + name + ".dita");
    writer = new XMLWriter(f);

    writer.writeComment("Arbortext, Inc., 1988-2011, v.4002");
    writer.setDTD("<!DOCTYPE reference PUBLIC \"-//IBM//DTD DITA IBM Reference//EN\" \"ibm-reference.dtd\">");
    writer.writeProcessingInstruction("Pub Sty _display FontColor=\"red\"");
    writer.writeProcessingInstruction("Pub Inc");
    writer.pushElement("reference");
    writer.addAttribute("architecture", "wlp");
    writer.addAttribute("id", "rwlp_" + kind + "_" + name);
    writer.addAttribute("xml:lang", lang);
  }

  public XMLWriter getWriter() {
    return writer;
  }
  
  /**
   * @throws XMLStreamException
   * 
   */
  public void done() throws XMLStreamException {
      writer.close();
  }
  public String getId() {
    return featureId;
  }

  public ResourceBundle getTypes() {
    return types;
  }

  public Map<String, String> getTags(String featureName) {
    Tagging tagging = featureTagging.get(featureName);
    if (tagging != null) {
      return tagging.getTags();
    }
    for (Tagging tagData : editionTagging) {
      if (tagData.matchFeature(dir, editionName, featureName)) {
        return tagData.getTags();
      }
    }
    return Collections.emptyMap();
  }

  public Map<String, String> getTags(List<String> features) {
    for (Tagging tagData : editionTagging) {
      for (String feature : features) {
        if (tagData.matchFeature(dir, editionName, feature)) {
          return tagData.getTags();
        }
      }
    }
    return Collections.emptyMap();
  }
}
